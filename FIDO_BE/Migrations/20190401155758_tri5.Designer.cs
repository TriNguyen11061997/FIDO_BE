// <auto-generated />
using System;
using FIDO_BE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FIDO_BE.Migrations
{
    [DbContext(typeof(FIDOContext))]
    [Migration("20190401155758_tri5")]
    partial class tri5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FIDO_BE.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContactAddressCity");

                    b.Property<int?>("ContactAddressCountry");

                    b.Property<int?>("ContactAddressLine");

                    b.Property<int?>("ContactAddressPostalCode");

                    b.Property<int?>("ContactAddressStateProvince");

                    b.Property<int?>("ContactAddressStreet");

                    b.Property<int?>("ContactAddressZipCode");

                    b.HasKey("AddressID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FIDO_BE.Models.ADUser", b =>
                {
                    b.Property<int>("ADUserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AACreatedDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("AAStatus")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("AAUpdatedDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("ADPassword")
                        .HasMaxLength(100);

                    b.Property<bool?>("ADUserActiveCheck");

                    b.Property<DateTime?>("ADUserDate")
                        .HasColumnType("DateTime");

                    b.Property<int>("ADUserGroupID");

                    b.Property<string>("ADUserName")
                        .HasMaxLength(100);

                    b.Property<string>("ADUserResetToken")
                        .HasMaxLength(500);

                    b.Property<int?>("FK_ReferenceID");

                    b.HasKey("ADUserID");

                    b.HasIndex("ADUserGroupID");

                    b.ToTable("ADUsers");
                });

            modelBuilder.Entity("FIDO_BE.Models.ADUserGroup", b =>
                {
                    b.Property<int>("ADUserGroupID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AAStatus")
                        .HasMaxLength(10);

                    b.Property<string>("ADUserGroupDesc")
                        .HasMaxLength(255);

                    b.Property<string>("ADUserGroupName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ADUserGroupID");

                    b.ToTable("ADUserGroups");
                });

            modelBuilder.Entity("FIDO_BE.Models.Certificate", b =>
                {
                    b.Property<int>("CertificateID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CertificateDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("CertificateDesc");

                    b.Property<string>("CertificatePicture1");

                    b.Property<string>("CertificatePicture2");

                    b.Property<string>("CertificatePicture3");

                    b.Property<string>("CertificateStatus")
                        .HasMaxLength(50);

                    b.Property<int?>("FK_DoctorID");

                    b.Property<int?>("FK_EmployeeID");

                    b.HasKey("CertificateID");

                    b.HasIndex("FK_DoctorID");

                    b.HasIndex("FK_EmployeeID");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("FIDO_BE.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentContent")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("CommentDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("CommentReportDesc")
                        .HasMaxLength(500);

                    b.Property<string>("CommentStatus")
                        .HasMaxLength(10);

                    b.Property<int?>("DoctorID");

                    b.Property<int?>("FK_DoctorID");

                    b.Property<int?>("FK_PatientID");

                    b.Property<int?>("PatientID");

                    b.HasKey("CommentID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FIDO_BE.Models.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactContent")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("ContactDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("ContactStatus")
                        .HasMaxLength(50);

                    b.Property<int?>("DoctorID");

                    b.Property<int?>("FK_DoctorID");

                    b.Property<int?>("FK_PatientID");

                    b.Property<int?>("PatientID");

                    b.HasKey("ContactID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("FIDO_BE.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AACreatedDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("AACreatedUser")
                        .HasMaxLength(50);

                    b.Property<string>("AAStatus")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("AAUpdatedDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("AAUpdatedUser")
                        .HasMaxLength(50);

                    b.Property<string>("DoctorAvatar")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DoctorBirthDay")
                        .HasColumnType("DateTime");

                    b.Property<string>("DoctorDesc")
                        .HasMaxLength(50);

                    b.Property<string>("DoctorEmail")
                        .HasMaxLength(50);

                    b.Property<string>("DoctorGender")
                        .HasMaxLength(10);

                    b.Property<string>("DoctorIDNumber")
                        .HasMaxLength(50);

                    b.Property<string>("DoctorIDNumberDate")
                        .HasMaxLength(50);

                    b.Property<string>("DoctorIDNumberPlace")
                        .HasMaxLength(50);

                    b.Property<string>("DoctorName")
                        .HasMaxLength(50);

                    b.Property<string>("DoctorNo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DoctorPassportDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("DoctorPassportNo")
                        .HasMaxLength(50);

                    b.Property<string>("DoctorPassportPlace")
                        .HasMaxLength(50);

                    b.Property<string>("DoctorPhone1")
                        .HasMaxLength(50);

                    b.Property<string>("DoctorPhone2")
                        .HasMaxLength(50);

                    b.Property<string>("DoctorSpecialist")
                        .HasMaxLength(10);

                    b.Property<string>("DoctorStatus")
                        .HasMaxLength(10);

                    b.Property<int?>("EmployeeID");

                    b.Property<string>("EmployeeName")
                        .HasMaxLength(10);

                    b.Property<int?>("FK_AddressID");

                    b.Property<int?>("FK_EmployeeID");

                    b.Property<string>("HospitalName")
                        .HasMaxLength(10);

                    b.HasKey("DoctorID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("FK_AddressID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("FIDO_BE.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AACreatedDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("AACreatedUser")
                        .HasMaxLength(50);

                    b.Property<string>("AAStatus")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("AAUpdatedDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("AAUpdatedUser")
                        .HasMaxLength(50);

                    b.Property<bool?>("EmployeeActiveCheck");

                    b.Property<DateTime?>("EmployeeBirthDay")
                        .HasColumnType("DateTime");

                    b.Property<string>("EmployeeDesc")
                        .HasMaxLength(255);

                    b.Property<string>("EmployeeEmail1")
                        .HasMaxLength(50);

                    b.Property<string>("EmployeeEmail2")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EmployeeEndWorkingDate")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("EmployeeEndWorkingTime")
                        .HasColumnType("DateTime");

                    b.Property<string>("EmployeeFax")
                        .HasMaxLength(50);

                    b.Property<string>("EmployeeGender")
                        .HasMaxLength(50);

                    b.Property<string>("EmployeeIDNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EmployeeIDNumberDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("EmployeeIDNumberPlace")
                        .HasMaxLength(150);

                    b.Property<string>("EmployeeName")
                        .HasMaxLength(150);

                    b.Property<string>("EmployeeNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EmployeePassportDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("EmployeePassportNo")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("EmployeePassportPlace")
                        .HasColumnType("DateTime");

                    b.Property<string>("EmployeePassword1")
                        .HasMaxLength(50);

                    b.Property<string>("EmployeePicture");

                    b.Property<DateTime?>("EmployeeStartWorkingDate")
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("EmployeeStartWorkingTime")
                        .HasColumnType("DateTime");

                    b.Property<string>("EmployeeTaxNumber")
                        .HasMaxLength(50);

                    b.Property<string>("EmployeeTel1")
                        .HasMaxLength(50);

                    b.Property<string>("EmployeeTel2")
                        .HasMaxLength(50);

                    b.Property<int?>("FK_AddressID");

                    b.HasKey("EmployeeID");

                    b.HasIndex("FK_AddressID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("FIDO_BE.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FK_PatientID");

                    b.Property<DateTime?>("FeedbackDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("FeedbackDesc")
                        .HasMaxLength(500);

                    b.HasKey("FeedbackID");

                    b.HasIndex("FK_PatientID");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("FIDO_BE.Models.Forum", b =>
                {
                    b.Property<int>("ForumID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FK_DoctorID");

                    b.Property<int?>("FK_PatientID");

                    b.Property<string>("ForumContent")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("ForumDate")
                        .HasColumnType("DateTime");

                    b.Property<int?>("PatientID");

                    b.HasKey("ForumID");

                    b.HasIndex("FK_PatientID");

                    b.HasIndex("PatientID");

                    b.ToTable("Forums");
                });

            modelBuilder.Entity("FIDO_BE.Models.ForumDetail", b =>
                {
                    b.Property<int>("ForumDetailID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FK_DoctorID");

                    b.Property<int?>("FK_ForumID");

                    b.Property<int?>("FK_PatientID");

                    b.Property<string>("ForumDetailContent")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("ForumDetailDate")
                        .HasColumnType("DateTime");

                    b.Property<int?>("ForumID");

                    b.Property<int?>("PatientID");

                    b.HasKey("ForumDetailID");

                    b.HasIndex("FK_PatientID");

                    b.HasIndex("ForumID");

                    b.HasIndex("PatientID");

                    b.ToTable("ForumDetails");
                });

            modelBuilder.Entity("FIDO_BE.Models.GENumbering", b =>
                {
                    b.Property<int>("GENumberingID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AAStatus")
                        .HasMaxLength(50);

                    b.Property<string>("GENumberingDesc")
                        .HasMaxLength(50);

                    b.Property<int?>("GENumberingLength");

                    b.Property<string>("GENumberingName")
                        .HasMaxLength(50);

                    b.Property<int?>("GENumberingPrefix");

                    b.Property<int?>("GENumberingStart");

                    b.Property<string>("GETableName")
                        .HasMaxLength(50);

                    b.HasKey("GENumberingID");

                    b.ToTable("GENumberings");
                });

            modelBuilder.Entity("FIDO_BE.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FK_DoctorID");

                    b.Property<int?>("FK_PatientID");

                    b.Property<string>("LocationLatitude")
                        .HasMaxLength(50);

                    b.Property<string>("LocationLongitude")
                        .HasMaxLength(50);

                    b.Property<int?>("PatientID");

                    b.HasKey("LocationID");

                    b.HasIndex("FK_PatientID");

                    b.HasIndex("PatientID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("FIDO_BE.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AACreatedDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("AACreatedUser")
                        .HasMaxLength(50);

                    b.Property<string>("AAStatus")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("AAUpdatedDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("AAUpdatedUser")
                        .HasMaxLength(50);

                    b.Property<int?>("FK_AddressID");

                    b.Property<DateTime>("PatientBirthDay")
                        .HasColumnType("DateTime");

                    b.Property<string>("PatientDesc")
                        .HasMaxLength(255);

                    b.Property<string>("PatientEmail")
                        .HasMaxLength(50);

                    b.Property<string>("PatientGender")
                        .HasMaxLength(50);

                    b.Property<string>("PatientIDNumber")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("PatientIDNumberDate")
                        .HasColumnType("DateTime");

                    b.Property<string>("PatientIDNumberPlace")
                        .HasMaxLength(150);

                    b.Property<string>("PatientName")
                        .HasMaxLength(150);

                    b.Property<string>("PatientNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PatientPicture");

                    b.Property<string>("PatientTel")
                        .HasMaxLength(50);

                    b.HasKey("PatientID");

                    b.HasIndex("FK_AddressID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("FIDO_BE.Models.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AACreatedDate")
                        .HasMaxLength(50);

                    b.Property<string>("AACreatedUser")
                        .HasMaxLength(50);

                    b.Property<string>("AAStatus")
                        .HasMaxLength(50);

                    b.Property<string>("AAUpdatedDate")
                        .HasMaxLength(50);

                    b.Property<string>("AAUpdatedUser")
                        .HasMaxLength(50);

                    b.Property<int?>("FK_EmployeeID");

                    b.Property<string>("PostContent")
                        .HasMaxLength(1024);

                    b.Property<string>("PostNo")
                        .HasMaxLength(50);

                    b.HasKey("PostID");

                    b.HasIndex("FK_EmployeeID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("FIDO_BE.Models.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DoctorID");

                    b.Property<int?>("FK_DoctorID");

                    b.Property<int?>("FK_PatientID");

                    b.Property<int?>("PatientID");

                    b.Property<string>("RatingDate")
                        .HasMaxLength(10);

                    b.Property<int?>("RatingIndex");

                    b.HasKey("RatingID");

                    b.HasIndex("DoctorID");

                    b.HasIndex("PatientID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("FIDO_BE.Models.ADUser", b =>
                {
                    b.HasOne("FIDO_BE.Models.ADUserGroup", "ADUserGroup")
                        .WithMany("ADUsers")
                        .HasForeignKey("ADUserGroupID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FIDO_BE.Models.Certificate", b =>
                {
                    b.HasOne("FIDO_BE.Models.Doctor", "Doctor")
                        .WithMany("Certificates")
                        .HasForeignKey("FK_DoctorID");

                    b.HasOne("FIDO_BE.Models.Employee", "Employee")
                        .WithMany("Certificates")
                        .HasForeignKey("FK_EmployeeID");
                });

            modelBuilder.Entity("FIDO_BE.Models.Comment", b =>
                {
                    b.HasOne("FIDO_BE.Models.Doctor", "Doctor")
                        .WithMany("Comments")
                        .HasForeignKey("DoctorID");

                    b.HasOne("FIDO_BE.Models.Patient", "Patient")
                        .WithMany("Comments")
                        .HasForeignKey("PatientID");
                });

            modelBuilder.Entity("FIDO_BE.Models.Contact", b =>
                {
                    b.HasOne("FIDO_BE.Models.Doctor", "Doctor")
                        .WithMany("Contacts")
                        .HasForeignKey("DoctorID");

                    b.HasOne("FIDO_BE.Models.Patient", "Patient")
                        .WithMany("Contacts")
                        .HasForeignKey("PatientID");
                });

            modelBuilder.Entity("FIDO_BE.Models.Doctor", b =>
                {
                    b.HasOne("FIDO_BE.Models.Employee", "Employee")
                        .WithMany("Doctors")
                        .HasForeignKey("EmployeeID");

                    b.HasOne("FIDO_BE.Models.Address", "Address")
                        .WithMany("Doctors")
                        .HasForeignKey("FK_AddressID");
                });

            modelBuilder.Entity("FIDO_BE.Models.Employee", b =>
                {
                    b.HasOne("FIDO_BE.Models.Address", "Address")
                        .WithMany("Employees")
                        .HasForeignKey("FK_AddressID");
                });

            modelBuilder.Entity("FIDO_BE.Models.Feedback", b =>
                {
                    b.HasOne("FIDO_BE.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("FK_PatientID");
                });

            modelBuilder.Entity("FIDO_BE.Models.Forum", b =>
                {
                    b.HasOne("FIDO_BE.Models.Doctor", "Doctor")
                        .WithMany("Forums")
                        .HasForeignKey("FK_PatientID");

                    b.HasOne("FIDO_BE.Models.Patient", "Patient")
                        .WithMany("Forums")
                        .HasForeignKey("PatientID");
                });

            modelBuilder.Entity("FIDO_BE.Models.ForumDetail", b =>
                {
                    b.HasOne("FIDO_BE.Models.Doctor", "Doctor")
                        .WithMany("ForumDetails")
                        .HasForeignKey("FK_PatientID");

                    b.HasOne("FIDO_BE.Models.Forum", "Forum")
                        .WithMany("ForumDetails")
                        .HasForeignKey("ForumID");

                    b.HasOne("FIDO_BE.Models.Patient", "Patient")
                        .WithMany("ForumDetails")
                        .HasForeignKey("PatientID");
                });

            modelBuilder.Entity("FIDO_BE.Models.Location", b =>
                {
                    b.HasOne("FIDO_BE.Models.Doctor", "Doctor")
                        .WithMany("Locations")
                        .HasForeignKey("FK_PatientID");

                    b.HasOne("FIDO_BE.Models.Patient", "Patient")
                        .WithMany("Locations")
                        .HasForeignKey("PatientID");
                });

            modelBuilder.Entity("FIDO_BE.Models.Patient", b =>
                {
                    b.HasOne("FIDO_BE.Models.Address", "Address")
                        .WithMany("Patients")
                        .HasForeignKey("FK_AddressID");
                });

            modelBuilder.Entity("FIDO_BE.Models.Post", b =>
                {
                    b.HasOne("FIDO_BE.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("FK_EmployeeID");
                });

            modelBuilder.Entity("FIDO_BE.Models.Rating", b =>
                {
                    b.HasOne("FIDO_BE.Models.Doctor", "Doctor")
                        .WithMany("Ratings")
                        .HasForeignKey("DoctorID");

                    b.HasOne("FIDO_BE.Models.Patient", "Patient")
                        .WithMany("Ratings")
                        .HasForeignKey("PatientID");
                });
#pragma warning restore 612, 618
        }
    }
}
